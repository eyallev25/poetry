def getBranchNameClean() {
  if (env.GIT_BRANCH.contains("PR")) {
    return env.CHANGE_BRANCH.replace("/", "-")
  }
  else {
    return env.GIT_BRANCH.replace("/", "-")
  }
}

pipeline {

    agent { label 'any' }
    parameters {
            choice(name: 'type', choices: ['Baseline', 'Benchmark'], description: "")
        }
    environment {
        AWS_ACCOUNT = "909761347836"
        STAGE = "staging"
        // AWS_REGION = pipelineEnvsPerProject.getRegion()
        AWS_REGION = "us-west-2"
        AWS_ROLE = "ops-cross-account-role"
        //AWS_ROLE = pipelineEnvsPerProject.getRole()
        BRANCH_NAME_CLEAN = getBranchNameClean()
        
        TEST_IMAGE_NAME="anun/tracer-benchmark"
        PROJECT_DIR="/anun-tracer-benchmark/tests"
        OUTPUT_DIR="/anun-tracer-benchmark/outputs"
        LOCAL_OUTPUT_DIR="${WORKSPACE}/outputs"
        PROJECT_NAME = "tracer-benchmark"
        METRICS_BUCKET_NAME="tracer-benchmark-results"
    }
    options {
        timeout(30)
    }
    stages {
        stage ('Prepare') {
            steps {
                script {
                    sh "${WORKSPACE}/build.sh"
                }
            }
        }
        stage ('Build Test Images') {
            steps {
                script {
                    sh "${WORKSPACE}/baseline_image/build.sh"
                    sh "${WORKSPACE}/tracer_image/build.sh"
                }
            }
        }
        stage ('Run Baseline Container') {
            steps {
                script {
                    sh "docker run  \
                            -v ${LOCAL_OUTPUT_DIR}:${OUTPUT_DIR} \
                            -v /var/run/docker.sock:/var/run/docker.sock \
                            -e OUTPUT_DIR \
                            -e PROJECT_DIR \
                            -e BUILD_NUMBER \
                            -e BRANCH_NAME_CLEAN \
                            -e METRICS_BUCKET_NAME \
                            ${TEST_IMAGE_NAME}:${BRANCH_NAME_CLEAN} ./run_test.sh test_baseline_container"
                }
            }
        }
        
    }
    post {
        always {
            
            archiveArtifacts artifacts: "outputs/tracer_run.csv"
            archiveArtifacts artifacts: "outputs/baseline_run.csv"
            archiveArtifacts artifacts: "outputs/*.log"
            
            cleanWs()
            deleteDir()
        }

    }
}