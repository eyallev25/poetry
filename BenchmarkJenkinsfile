def getBranchNameClean() {
  if (env.GIT_BRANCH.contains("PR")) {
    return env.CHANGE_BRANCH.replace("/", "-")
  }
  else {
    return env.GIT_BRANCH.replace("/", "-")
  }
}

pipeline {

    agent any
    parameters {
            choice(name: 'type', choices: ['Baseline', 'Benchmark'], description: "")
        }
    environment {
        AWS_ACCOUNT = "909761347836"
        STAGE = "staging"
        // AWS_REGION = pipelineEnvsPerProject.getRegion()
        AWS_REGION = "us-west-2"
        AWS_ROLE = "ops-cross-account-role"
        //AWS_ROLE = pipelineEnvsPerProject.getRole()
        BRANCH_NAME_CLEAN = getBranchNameClean()
        
        TEST_IMAGE_NAME="anun/tracer-benchmark"
        PROJECT_DIR="${WORKSPACE}/tests"
        OUTPUT_DIR="${WORKSPACE}/outputs"
        LOCAL_OUTPUT_DIR="${WORKSPACE}/outputs"
        PROJECT_NAME = "tracer-benchmark"
        METRICS_BUCKET_NAME="tracer-benchmark-results"
    }
    options {
        timeout(30)
    }
    stages {
        stage ('prepare') {
        steps {
                script {
                    
                    sh "cd tests && poetry install && cd .."
                }
            }
        }
        
        stage ('Run Baseline Container') {
            steps {
                script {
                    sh 'env'
                    sh "${WORKSPACE}/scripts/run_test.sh test_baseline_container"
                }
            }
        }
        
    }
    post {
        always {
            archiveArtifacts artifacts: "outputs/baseline_run.csv"
            archiveArtifacts artifacts: "outputs/*.log"
            junit allowEmptyResults: true, testResults: "outputs/test_baseline_container-report.xml"
            
            
        }

    }
}